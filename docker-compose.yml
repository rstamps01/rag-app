
services:
  #webap:
  #  build: https://rstamps01/rag-app:v1.2.0-stable-release
  backend-07:
    env_file:
      - .env
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-07
    restart: unless-stopped
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

    # GPU Support for RTX 5090
    deploy:
      resources:
        limits:
          memory: 20G
        reservations:
          memory: 8G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    volumes:
      - ./backend/models_cache:/app/models_cache:rw
      - "backend_logs-07:/app/data/logs:rw"
      - "uploaded_documents-07:/app/data/uploads:rw"
    
    environment:
      # Cache configuration
      - HF_HOME=/app/models_cache
      - HF_HUB_CACHE=/app/models_cache/hub
      - MODELS_CACHE_DIR=/app/models_cache
      
      # Python path fix
      - PYTHONPATH=/app

      # GPU configuration (fixed conflicts)
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=0
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      
      # Application configuration
      - DATABASE_URL=postgresql://rag:rag@postgres-07:5432/rag
      - QDRANT_URL=http://qdrant-07:6333
      - QDRANT_COLLECTION_NAME=rag
      - EMBEDDING_MODEL_NAME=sentence-transformers/all-MiniLM-L6-v2
      - LLM_MODEL_NAME=mistralai/Mistral-7B-Instruct-v0.2
      - JWT_SECRET=${JWT_SECRET}
      #- JWT_SECRET=d7cab90ed8cbc61dcc3170aa5c3ccb5a9d689474af3d8163e9bc93fa722fbd4f
      - JWT_ALGORITHM=HS256
      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      - POSTGRES_USER=rag
      - POSTGRES_PASSWORD=rag
      - POSTGRES_DB=rag

    # Commented out: 7/20/25
    # Wait for cache initialization before starting
    command: >
      sh -c "
        echo 'Waiting for cache initialization...' &&
        while [ ! -f /app/models_cache/.initialization_complete ]; do
          echo 'Cache not ready, waiting...'
          sleep 2
        done &&
        echo 'Cache initialization detected, starting backend...' &&
        cd /app &&
        PYTHONPATH=/app python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

    depends_on:
      postgres-07:
        condition: service_healthy
      qdrant-07:
        condition: service_healthy
    
    networks:
      - network-07

  postgres-07:
    image: postgres:15
    container_name: postgres-07
    restart: unless-stopped
    environment:
      - POSTGRES_USER=rag
      - POSTGRES_PASSWORD=rag
      - POSTGRES_DB=rag
    volumes:
      - "postgres_data-07:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag -d rag"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network-07

  qdrant-07:
    image: qdrant/qdrant:latest
    container_name: qdrant-07
    restart: unless-stopped
    environment:
      - QDRANT_URL=http://qdrant-07:6333
      - QDRANT_HOST=qdrant-07
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=rag
    volumes:
      - "qdrant_data-07:/qdrant/storage"
    ports:
      - "6333:6333"
      - "6334:6334"
    healthcheck:
      test: ["CMD", "sh", "-c", "grep -q ':18BD ' /proc/net/tcp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
    - network-07

  frontend-07:
    build: #image: rag-frontend:latest
      context: ./frontend
      dockerfile: Dockerfile
      args:
      - BUILDKIT_INLINE_CACHE=1
    container_name: frontend-07
    environment:
      # FIXED: Use localhost for browser-based requests (React runs in browser)
      # React apps run in the browser, not in the container, so they need localhost
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
      # Internal container communication (for server-side rendering if needed)
      - REACT_APP_API_URL_INTERNAL=http://backend-07:8000
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3000:3000"
    networks:
      - network-07
    depends_on:
      - backend-07
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FIXED: Cache initialization as init container
  cache-init-07:
    build:
      context: ./backend
      dockerfile: Dockerfile.cache-init
      args:
        - BUILDKIT_INLINE_CACHE=1 
    container_name: cache-init-07
    environment:
      # Authentication
      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
      
      # Cache configuration
      - HF_HOME=/app/models_cache
      - MODELS_CACHE_DIR=/app/models_cache
      - HF_HUB_CACHE=/app/models_cache/hub
      
      # GPU configuration (fixed)
      #- CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-1}
      - CUDA_VISIBLE_DEVICES=0
      #- NVIDIA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-1}
      - NVIDIA_VISIBLE_DEVICES=0
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      
      # Python configuration
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      # Cache storage
      - ./backend/models_cache:/app/models_cache
      
      # Logs
      - cache_init_logs:/app/logs
    
    networks:
      - network-07
    
    profiles:
      - cache-init
    
    # FIXED: No restart policy for init containers
    restart: "no"
    
    # FIXED: Remove unnecessary dependencies
    # depends_on: (removed)
    
    # FIXED: Add completion marker and exit
    command: >
      sh -c "
        if [ -f /app/models_cache/.initialization_complete ]; then
          echo 'Cache already initialized, skipping...'
          exit 0
        else
          echo 'Starting cache initialization...' &&
          python /app/scripts/initialize_model_cache.py &&
          touch /app/models_cache/.initialization_complete &&
          echo 'Cache initialization completed successfully' &&
          exit 0
        fi
      "
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "com.rag-app.service"

volumes:
  postgres_data-07:
    driver: local
    name: postgres_data-07

  qdrant_data-07:
    driver: local
    name: qdrant_data-07

  backend_logs-07:
    driver: local
    name: backend_logs-07

  uploaded_documents-07:
    driver: local
    name: uploaded_documents-07

  cache_init_logs:
    driver: local
    name: cache_init_logs_07

networks:
  network-07:
    driver: bridge
    name: network-07

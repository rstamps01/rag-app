FROM nvidia/cuda:12.8.0-runtime-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    build-essential \
    tesseract-ocr \
    tesseract-ocr-eng \
    libpq-dev \
    curl \
    wget \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create Python symlinks conditionally (FIXED: Check if symlink exists first)
RUN if [ ! -f /usr/bin/python ]; then ln -s /usr/bin/python3 /usr/bin/python; fi
RUN if [ ! -f /usr/bin/pip ]; then ln -s /usr/bin/pip3 /usr/bin/pip; fi

# Verify Python installation
RUN python --version && pip --version

# Set working directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/config /app/scripts /app/data/logs /app/data/uploads /app/models_cache

# Copy requirements and install Python packages
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . .

# Copy scripts
COPY scripts/model_cache_utils.py /app/scripts/
COPY scripts/initialize_model_cache.py /app/scripts/

# Create cache config file if it doesn't exist (FIXED: Handle missing config file)
RUN if [ ! -f config/cache_config.json ]; then \
    echo '{"cache_dir": "/app/models_cache", "models": ["sentence-transformers/all-MiniLM-L6-v2", "mistralai/Mistral-7B-Instruct-v0.2"], "settings": {"validate_on_startup": true, "create_completion_marker": true}}' > /app/config/cache_config.json; \
    fi

# Copy config file to app directory
COPY config/cache_config.json /app/config/ 2>/dev/null || cp /app/config/cache_config.json /app/config/

# Validate configuration file
RUN python -m json.tool /app/config/cache_config.json > /dev/null || (echo "ERROR: Invalid JSON in cache_config.json"; exit 1)

# Set proper permissions
RUN chmod +x /app/scripts/*.py
RUN chown -R root:root /app
RUN chmod -R 755 /app

# Set environment variables
ENV PYTHONPATH=/app
ENV HF_HOME=/app/models_cache
ENV MODELS_CACHE_DIR=/app/models_cache
ENV HF_HUB_CACHE=/app/models_cache/hub

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

# Stable Docker Compose for Mistral-7B-Instruct-v0.1 with upgrade path to v0.3
# version: '3.8'

services:
  postgres-07:
    image: postgres:14
    container_name: rag-postgres-07
    environment:
      POSTGRES_USER: rag
      POSTGRES_PASSWORD: rag
      POSTGRES_DB: rag
    volumes:
      - postgres_data-07:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag -d rag"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant-07:
    image: qdrant/qdrant:latest
    container_name: rag-qdrant-07
    volumes:
      - qdrant_data-07:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-07:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-backend-07
    volumes:
      - ./data-07:/app/data
      - models_cache-07:/app/models_cache  # Persistent model cache 
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    environment:
      # Authentication
      - HUGGINGFACE_TOKEN=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
      - HUGGING_FACE_HUB_TOKEN=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
      - HF_TOKEN=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
      
      # Database connections
      - DATABASE_URL=postgresql://rag:rag@postgres-07:5432/rag
      - QDRANT_URL=http://qdrant-07:6333
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-supersecretkey}
      
      # Model settings - Stable v0.1
      - LLM_MODEL_NAME=mistralai/Mistral-7B-Instruct-v0.1
      - UPGRADE_TARGET_MODEL=mistralai/Mistral-7B-Instruct-v0.3
      - USE_QUANTIZATION=true
      - ENABLE_FLASH_ATTENTION=false
      - USE_MIXED_PRECISION=true
      
      # RTX 5090 optimizations - Conservative
      - CUDA_VISIBLE_DEVICES=0
      - TORCH_CUDA_ARCH_LIST=8.9
      - CUDA_LAUNCH_BLOCKING=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      
      # Performance settings - Stable v0.1
      - MAX_CONTEXT_LENGTH=8192
      - MAX_NEW_TOKENS=512
      - BATCH_SIZE=1
      - MAX_BATCH_SIZE=2
      - INFERENCE_TIMEOUT=120
      
      # Memory management - Conservative
      - MAX_MEMORY_ALLOCATION=0.8
      - MEMORY_CLEANUP_INTERVAL=300
      
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - LOG_LEVEL=INFO
      
      # Upgrade planning
      - ENABLE_V03_UPGRADE_PATH=true
      - V03_MIGRATION_READY=false
      
    depends_on:
      postgres-07:
        condition: service_healthy
      qdrant-07:
        condition: service_healthy
    restart: unless-stopped
    
    # GPU configuration for RTX 5090
    deploy:
      resources:
        limits:
          memory: 24G  # Conservative for v0.1
        reservations:
          memory: 12G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    # Health check with reasonable timeout for v0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      start_period: 90s  # Faster startup with v0.1
      retries: 3

  frontend-07:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag-frontend-07
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3000:3000"
    depends_on:
      backend-07:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data-07:
  qdrant_data-07:
  data-07:
  models_cache-07:  # Persistent model cache for easy v0.3 upgrade

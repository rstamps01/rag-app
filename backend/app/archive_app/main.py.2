from fastapi import FastAPI, Depends, HTTPException, APIRouter, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from app.api.routes import auth, documents, queries, admin, system
from app.core.config import settings
from app.api.routes import monitoring
from typing import List
import os
import logging # Added
import sys # Added

# Configure basic logging to output to stdout
logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout
)

# Add imports for your database models, schemas, services (e.g., document processing, query handling)
# from .schemas import DocumentSchema, QueryRequest, QueryResponse
# from .services import process_uploaded_document, handle_query, list_all_documents


app = FastAPI(title="RAG AI Application API", version="1.0.0")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(auth.router, prefix=f"{settings.API_V1_STR}/auth", tags=["authentication"])
app.include_router(documents.router, prefix=f"{settings.API_V1_STR}/documents", tags=["documents"])
app.include_router(queries.router, prefix=f"{settings.API_V1_STR}/queries", tags=["queries"])
app.include_router(admin.router, prefix=f"{settings.API_V1_STR}/admin", tags=["admin"])
app.include_router(system.router, prefix=f"{settings.API_V1_STR}/system", tags=["system"])
app.include_router(monitoring.router, tags=["monitoring"])

@app.get("/")
async def root():
    return {
        "message": "Welcome to RAG AI Application API",
        "version": "1.0.0",
        "documentation": "/docs",
        "rtx5090_optimized": True
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

"""
RAG Application Main - Complete Version
Includes all API routes and functionality
"""
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import configuration
try:
    from app.core.config import settings
    logger.info("‚úÖ Config imported successfully")
    config_ok = True
except Exception as e:
    logger.error(f"‚ùå Config import failed: {e}")
    config_ok = False
    # Create minimal settings for fallback
    class MinimalSettings:
        PROJECT_NAME = "RAG Application"
        API_V1_STR = "/api/v1"
        DATABASE_URL = "postgresql://rag:rag@postgres-07:5432/rag"
    settings = MinimalSettings()

# Import database and models
try:
    from app.db.session import SessionLocal, engine
    from app.models import models
    logger.info("‚úÖ Database imports successful")
    db_ok = True
except Exception as e:
    logger.error(f"‚ùå Database import failed: {e}")
    db_ok = False

# Import API routes
try:
    from app.api.routes import queries
    logger.info("‚úÖ API routes imported successfully")
    routes_ok = True
except Exception as e:
    logger.error(f"‚ùå API routes import failed: {e}")
    routes_ok = False

# Lifespan manager
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager"""
    logger.info("üöÄ Starting RAG Application...")
    
    # Create database tables if possible
    if db_ok:
        try:
            models.Base.metadata.create_all(bind=engine)
            logger.info("‚úÖ Database tables created/verified")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è  Database table creation failed: {e}")
    
    yield
    
    logger.info("üõë Shutting down RAG Application...")

# Create FastAPI app
app = FastAPI(
    title=getattr(settings, 'PROJECT_NAME', 'RAG Application'),
    version="1.0.0",
    description="RAG Application with VAST Storage Knowledge Base",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Database dependency
def get_db():
    """Get database session"""
    if not db_ok:
        raise HTTPException(status_code=503, detail="Database not available")
    
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Include API routes if available
if routes_ok:
    try:
        app.include_router(queries.router, prefix=settings.API_V1_STR + "/queries", tags=["queries"])
        logger.info("‚úÖ Queries routes included")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è  Failed to include queries routes: {e}")

# Basic routes
@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "RAG Application - Full Version",
        "status": "running",
        "config_loaded": config_ok,
        "database_available": db_ok,
        "routes_loaded": routes_ok,
        "version": "1.0.0"
    }

@app.get("/health")
async def health():
    """Health check endpoint"""
    health_status = {
        "status": "healthy",
        "config": "ok" if config_ok else "error",
        "database": "ok" if db_ok else "error", 
        "routes": "ok" if routes_ok else "error",
        "timestamp": time.time()
    }
    
    # Return 503 if critical components are down
    if not config_ok:
        return JSONResponse(status_code=503, content=health_status)
    
    return health_status

# Fallback API routes if main routes failed to load
if not routes_ok:
    @app.get(settings.API_V1_STR + "/queries/history")
    async def get_query_history_fallback():
        """Fallback query history endpoint"""
        return {
            "error": "Query routes not available",
            "message": "API routes failed to load",
            "fallback": True
        }
    
    @app.post(settings.API_V1_STR + "/queries/ask")
    async def ask_query_fallback():
        """Fallback ask query endpoint"""
        return {
            "error": "Query functionality not available", 
            "message": "API routes failed to load",
            "fallback": True
        }
    
    @app.get(settings.API_V1_STR + "/documents/")
    async def get_documents_fallback():
        """Fallback documents endpoint"""
        return {
            "error": "Document routes not available",
            "message": "API routes failed to load", 
            "fallback": True
        }

# Error handlers
@app.exception_handler(404)
async def not_found_handler(request, exc):
    """Custom 404 handler"""
    return JSONResponse(
        status_code=404,
        content={
            "error": "Endpoint not found",
            "path": str(request.url.path),
            "message": "The requested endpoint is not available",
            "available_endpoints": [
                "/",
                "/health",
                "/docs",
                f"{settings.API_V1_STR}/queries/history",
                f"{settings.API_V1_STR}/queries/ask",
                f"{settings.API_V1_STR}/documents/"
            ]
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    """Custom 500 handler"""
    logger.error(f"Internal server error: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": "An unexpected error occurred",
            "path": str(request.url.path)
        }
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

# File Path: /home/ubuntu/rag_app_v2/rag-app/backend/app/crud/crud_user.py
from sqlalchemy.orm import Session
# from app import models, schemas
from app import models # Keep this if models are used directly
from app.schemas.user import UserCreate # Import UserCreate specifically
from app.core.security import get_password_hash, verify_password
import logging
from app.models.models import User

logger = logging.getLogger(__name__)

def get_user(db: Session, user_id: int):
    return db.query(models.User).filter(models.User.id == user_id).first()

def get_user_by_email(db: Session, email: str):
    return db.query(models.User).filter(models.User.email == email).first()

def get_users(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.User).offset(skip).limit(limit).all()

#def create_user(db: Session, user: schemas.UserCreate):
def create_user(db: Session, user: UserCreate):
    # Ensure the password being passed is already hashed
    db_user = models.User(
        email=user.email,
        hashed_password=user.password, # Assumes password in UserCreate is already hashed
        department=user.department,
        is_active=user.is_active,
        is_admin=user.is_admin
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    logger.info(f"Created user: {user.email}")
    return db_user

def authenticate_user(db: Session, email: str, password: str) -> models.User | None:
    user = get_user_by_email(db, email=email)
    if not user:
        logger.debug(f"Authentication failed: User not found - {email}")
        return None
    if not verify_password(password, user.hashed_password):
        logger.debug(f"Authentication failed: Invalid password for user - {email}")
        return None
    logger.debug(f"Authentication successful for user: {email}")
    return user

# Add other user-related CRUD operations as needed (update, delete, etc.)


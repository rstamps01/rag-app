# File Path: /home/ubuntu/rag-app-analysis/rag-app/backend/app/core/config.py
import os
from typing import Optional, List
from email_validator import validate_email
from pydantic_settings import BaseSettings
from pydantic import field_validator, BaseModel, Field

class Settings(BaseSettings):
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "RAG AI Application"

    # Security
    JWT_SECRET: str = os.getenv("JWT_SECRET", "supersecretkey")
    SECRET_KEY: str = os.getenv("SECRET_KEY", "supersecretkey123456789")
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8  # 8 days

    # Database
    DATABASE_URL: str = os.getenv("DATABASE_URL", "postgresql://rag:rag@postgres:5432/rag")

    # Vector Database
    QDRANT_URL: str = os.getenv("QDRANT_URL", "http://qdrant:6333") 
    QDRANT_HOST: str = os.getenv("QDRANT_HOST", "qdrant")
    QDRANT_PORT: int = int(os.getenv("QDRANT_PORT", "6333"))
    QDRANT_COLLECTION_NAME: str = os.getenv("QDRANT_COLLECTION_NAME", "rag_documents")
    
    # GPU Settings
    USE_GPU: bool = os.getenv("USE_GPU", "True").lower() in ("true", "1", "t")
    
    # LLM Settings
    DEFAULT_LLM_MODEL: str = os.getenv("DEFAULT_LLM_MODEL", "mistral-7b")
    AVAILABLE_MODELS: list = ["gpt-j-6b", "llama-2-7b", "falcon-7b", "mistral-7b"]
    
    # OCR Settings
    OCR_ENABLED: bool = os.getenv("OCR_ENABLED", "True").lower() in ("true", "1", "t")
    OCR_LANGUAGE: str = os.getenv("OCR_LANGUAGE", "eng")
    
    # Context Window Settings
    MAX_CONTEXT_LENGTH: int = int(os.getenv("MAX_CONTEXT_LENGTH", "4096"))
    MAX_NEW_TOKENS: int = int(os.getenv("MAX_NEW_TOKENS", "512"))
    
    # File Storage
    UPLOAD_DIR: str = os.getenv("UPLOAD_DIR", "/app/data/uploads")
    LOGS_DIR: str = os.getenv("LOGS_DIR", "/app/data/logs")
    MODELS_CACHE_DIR: str = os.getenv("MODELS_CACHE_DIR", "/app/models_cache")

    class Config:
        case_sensitive = True

settings = Settings()

# File Path: /home/ubuntu/rag_app_v2/rag-app/backend/app/api/routes/documents.py
from fastapi import (
    APIRouter, 
    Depends, 
    HTTPException, 
    status, 
    UploadFile, 
    File, 
    BackgroundTasks,
    Query
)
from sqlalchemy.orm import Session
from typing import Any, List
import os
import uuid
import logging
import time

# from app import schemas, models, crud # Correct imports
from app import schemas, models # Import top-level packages
from app.crud import crud_document # Import specific crud module
from app.api import deps # Correct import for get_db and get_current_user
from app.core.config import settings
from app.services import document_processor # Import the service

logger = logging.getLogger(__name__)
router = APIRouter()

os.makedirs(settings.UPLOAD_DIR, exist_ok=True)

@router.post("/", response_model=schemas.Document, status_code=status.HTTP_202_ACCEPTED)
async def upload_document(
    background_tasks: BackgroundTasks,
    db: Session = Depends(deps.get_db),
    current_user: models.User = Depends(deps.get_current_user),
    file: UploadFile = File(...),
) -> Any:
    """
    Accepts a document upload, saves it, creates a DB record,
    and triggers background processing.
    Requires authentication.
    """
    upload_time = time.time()
    doc_id = str(uuid.uuid4())
    safe_filename = f"{doc_id}_{os.path.basename(file.filename)}"
    file_location = os.path.join(settings.UPLOAD_DIR, safe_filename)

    try:
        file_content = await file.read()
        file_size = len(file_content)
        with open(file_location, "wb") as f:
            f.write(file_content)
        logger.info(f"User {current_user.email} saved file: {file_location}, size: {file_size}")
    except Exception as e:
        logger.error(f"Failed to save file {safe_filename} for user {current_user.email}: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to save uploaded file: {e}"
        )
    finally:
        await file.close()

    doc_in = schemas.DocumentCreate(
        filename=file.filename,
        content_type=file.content_type,
        size=file_size,
        status="pending",
        path=file_location,
        owner_id=current_user.id, # Link to the user
        department=current_user.department # Assign user's department
    )

    try:
        # db_doc = crud.crud_document.create_document(db=db, document=doc_in)
        db_doc = crud_document.create_document(db=db, document=doc_in)
        logger.info(f"Initial metadata saved to DB for doc_id: {db_doc.id} by user {current_user.email}")
    except Exception as e:
        logger.error(f"Failed to save initial metadata for doc_id {doc_id} by user {current_user.email}: {e}", exc_info=True)
        if os.path.exists(file_location):
            os.remove(file_location) # Clean up saved file if DB entry fails
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create document record in database: {e}"
        )

    background_tasks.add_task(
        document_processor.process_and_store_document, 
        db=db, # Pass db session if needed by the processor
        doc_id=db_doc.id, 
        file_path=file_location, 
        department=current_user.department
    )
    logger.info(f"Background task added for doc_id: {db_doc.id}")

    return db_doc # Return the created document record

# Corrected list_documents function (from previous fix)
@router.get("/", response_model=schemas.DocumentListResponse)
async def list_documents(
    db: Session = Depends(deps.get_db),
    current_user: models.User = Depends(deps.get_current_user),
    skip: int = Query(0, ge=0),
    limit: int = Query(10, ge=1, le=100)
) -> Any:
    """
    List documents for the authenticated user's department with pagination.
    """
    logger.info(f"User {current_user.email} listing documents for department: {current_user.department}, skip={skip}, limit={limit}")
    try:
        documents = crud_document.get_documents_by_department(
            db=db, department=current_user.department, skip=skip, limit=limit
        )
        total_count = crud_document.count_documents_by_department(
            db=db, department=current_user.department
        )
        return {"documents": documents, "total_count": total_count}
    except Exception as e:
        logger.error(f"Error listing documents for user {current_user.email}, department {current_user.department}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to retrieve documents")

@router.get("/{document_id}", response_model=schemas.Document)
async def get_document(
    document_id: str,
    db: Session = Depends(deps.get_db),
    current_user: models.User = Depends(deps.get_current_user),
) -> Any:
    """
    Get a specific document by ID, ensuring it belongs to the user's department.
    """
    logger.info(f"User {current_user.email} requesting document: {document_id}")
    document = crud_document.get_document(db=db, doc_id=document_id)
    
    if not document:
        logger.warning(f"Document not found: {document_id} (requested by {current_user.email})")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Document not found")
    
    # Check if the document belongs to the user's department
    if document.department != current_user.department:
        logger.warning(f"User {current_user.email} attempted to access document {document_id} from unauthorized department {document.department}")
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not authorized to access this document")
        
    logger.info(f"Retrieved document: {document_id} for user {current_user.email}")
    return document

@router.delete("/{document_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_document(
    document_id: str,
    db: Session = Depends(deps.get_db),
    current_user: models.User = Depends(deps.get_current_user),
) -> None:
    """
    Delete a document by ID, ensuring it belongs to the user's department.
    Includes deleting the file, DB record, and vector embeddings.
    """
    logger.info(f"User {current_user.email} attempting to delete document: {document_id}")
    document = crud_document.get_document(db=db, doc_id=document_id)

    if not document:
        logger.warning(f"Attempted to delete non-existent document: {document_id} by user {current_user.email}")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Document not found")

    # Check if the document belongs to the user's department
    if document.department != current_user.department:
        logger.warning(f"User {current_user.email} attempted to delete document {document_id} from unauthorized department {document.department}")
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not authorized to delete this document")

    # 1. Delete from Vector Store
    try:
        await document_processor.delete_document_vectors(document_id=document_id)
        logger.info(f"Deleted embeddings from vector DB for doc_id: {document_id}")
    except Exception as e:
        logger.error(f"Failed to delete embeddings for doc_id {document_id}: {e}", exc_info=True)
        # Decide if this should prevent deletion (maybe not, if DB/file deletion works)

    # 2. Delete File from Storage
    file_path = document.path
    if file_path and os.path.exists(file_path):
        try:
            os.remove(file_path)
            logger.info(f"Deleted file: {file_path}")
        except Exception as e:
            logger.error(f"Failed to delete file {file_path} for doc_id {document_id}: {e}", exc_info=True)
    else:
        logger.warning(f"File path not found or file does not exist for doc_id {document_id}: {file_path}")

    # 3. Delete from Database
    try:
        deleted_doc = crud_document.delete_document(db=db, doc_id=document_id)
        if not deleted_doc:
             logger.warning(f"Document {document_id} was not found in DB during delete operation by user {current_user.email}.")
             # Already checked existence, but handle potential race condition
             raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Document not found during delete.")
        logger.info(f"Deleted document metadata from DB for doc_id: {document_id} by user {current_user.email}")
    except HTTPException as http_exc:
        raise http_exc
    except Exception as e:
        logger.error(f"Failed to delete metadata for doc_id {document_id} from DB: {e}", exc_info=True)  
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to delete document record from database: {e}"
        )

    return None # Return 204 No Content on success

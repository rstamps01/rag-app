# File Path: /home/ubuntu/rag_app_v2/rag-app/backend/app/api/routes/queries.py

from fastapi import APIRouter, Depends, HTTPException, status, Query
from typing import Any, List
import time
import logging
from sqlalchemy.orm import Session

# Import schemas, models, crud, deps, services
from ... import models, schemas, crud
from ...api import deps
from app.db.base import get_db   # from ...database import get_db
from ...services import query_processor # Import the new service

# Setup logger
logger = logging.getLogger(__name__)

router = APIRouter()

# ================================================
# API Route Definitions using Query Processor Service
# ================================================

@router.post("/ask", response_model=schemas.QueryResponse)
async def process_query_endpoint(
    request: schemas.QueryRequest,
    db: Session = Depends(get_db), # DB session might be needed for history later
    current_user: models.User = Depends(deps.get_current_user),
) -> Any:
    """
    Receives a query request, executes the RAG pipeline using the query_processor service
    for the user's department, and returns the response. Requires authentication.
    """
    logger.info(f"Received query from user {current_user.username} (Dept: {current_user.department}) : \"{request.query}\"")
    try:
        # Call the query processing service, passing query and department
        response = await query_processor.process_query(
            query_text=request.query, 
            department=current_user.department
        )
        return response
    except HTTPException as e:
        # Re-raise HTTP exceptions from the service (e.g., LLM not available)
        raise e
    except Exception as e:
        error_msg = f"Unhandled exception processing query for user {current_user.username}: {e}"
        logger.error(error_msg, exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error while processing query."
        )

# Commenting out history endpoint for now as it requires DB implementation
# @router.get("/history", response_model=List[schemas.QueryResponse])
# async def get_query_history_endpoint(
#     db: Session = Depends(get_db),
#     current_user: models.User = Depends(deps.get_current_user),
#     skip: int = Query(0, ge=0),
#     limit: int = Query(50, ge=1, le=100)
# ) -> Any:
#     """
#     Get history of previous queries for the authenticated user.
#     Requires database implementation.
#     """
#     logger.info(f"Fetching query history for user {current_user.username}, skip={skip}, limit={limit}")
#     # history = await crud_query_history.get_multi_by_user(db, user_id=current_user.id, skip=skip, limit=limit)
#     history = [] # Placeholder
#     return history


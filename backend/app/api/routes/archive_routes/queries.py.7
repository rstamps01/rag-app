# File Path: /home/ubuntu/rag_app_v2/rag-app/backend/app/api/routes/queries.py

from fastapi import APIRouter, Depends, HTTPException, status
from typing import Any, List, Optional # Added Optional
import time
import logging

# Assuming schemas are defined correctly elsewhere
# from app.schemas.queries import QueryRequest, QueryResponse, Source
# --- Example Pydantic models (replace with your actual schemas) ---
from pydantic import BaseModel
from app.db.base import get_db # CORRECTED Import for get_db
from sqlalchemy.orm import Session
from ...services import query_processor # Import the new service

class QueryRequest(BaseModel):
    query: str
    # MODIFIED: Made department optional with a default value
    department: Optional[str] = "General" 
    model: str | None = "default_model" # Optional: if you support multiple models
    # Add other parameters like user_id, session_id if needed

class Source(BaseModel):
    document_id: str
    document_name: str
    relevance_score: float
    content_snippet: str

class QueryResponse(BaseModel):
    query: str
    response: str
    model: str | None
    sources: List[Source]
    processing_time: float
    gpu_accelerated: bool # Or remove if not tracking
# --- End Example Models ---

# Import the pipeline monitor (if used)
# from app.core.pipeline_monitor import pipeline_monitor

# Import your actual RAG service/functions
# from app.services import rag_service # Example RAG service
# from app.db import crud_query_history # Example DB functions for history

# Setup logger
logger = logging.getLogger(__name__)

router = APIRouter()

# ================================================
# API Route Definitions
# ================================================

# RE-CORRECTED: Use locally defined QueryResponse, not schemas.QueryResponse
@router.post("/ask", response_model=QueryResponse) 
async def process_query_endpoint(
    request: QueryRequest,
    db: Session = Depends(get_db) # Added DB dependency
    # Add Depends(get_current_user) for authentication
) -> Any:
    """
    Receives a query request, executes the RAG pipeline, and returns the response.
    """
    logger.info(f"--- queries.py: process_query_endpoint ENTRY --- Received query: {request.query}, Department: {request.department}") # ADDED LOGGING
    # pipeline_monitor.record_event(pipeline_id, 'query_received', ...)
    try:
        # Use the actual query_processor service
        # MODIFIED: Pass the potentially None department, or the default "General"
        department_to_use = request.department if request.department is not None else "General"
        response = await query_processor.process_query(
            query_text=request.query, 
            department=department_to_use
        )
        # Note: The 'model' parameter from QueryRequest isn't used in process_query currently
        # You might want to pass it if you implement model switching
        logger.info(f"--- queries.py: process_query_endpoint EXIT --- Successfully processed query: {request.query}") # ADDED LOGGING
        return response
    except HTTPException as http_exc:
        # Re-raise HTTP exceptions from the service layer
        logger.error(f"--- queries.py: process_query_endpoint HTTP EXCEPTION --- Query: {request.query}, Error: {http_exc.detail}", exc_info=True) # ADDED LOGGING
        raise http_exc
    except Exception as e:
        error_msg = f"Failed to execute RAG query 	'{request.query}	': {e}"
        logger.error(f"--- queries.py: process_query_endpoint EXCEPTION --- Query: {request.query}, Error: {error_msg}", exc_info=True) # ADDED LOGGING
        # pipeline_monitor.record_event(pipeline_id, 'query_failed', {'error': str(e)})
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process query: {e}"
        )

# RE-CORRECTED: Use locally defined QueryResponse, not schemas.QueryResponse
@router.get("/history", response_model=List[QueryResponse])
async def get_query_history_endpoint(
    skip: int = 0, 
    limit: int = 50,
    db: Session = Depends(get_db) # Added DB dependency
    # Add Depends(get_current_user) for authentication
) -> Any:
    """
    Get history of previous queries (requires database implementation).
    Replace with actual database query.
    """
    # === Placeholder: Fetch query history from Database ===
    # history = await crud_query_history.get_multi(db=db, skip=skip, limit=limit)
    # Simulate empty history for now
    history = [] 
    logger.info(f"Listing query history, skip={skip}, limit={limit}")
    # pipeline_monitor.record_event(pipeline_id, 'query_history_retrieved', ...)
    return history
    # === End Placeholder ===


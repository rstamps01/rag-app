import time
import logging
import psutil
import torch
import threading
import json
import os
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("rag_app.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("rag_app")

class SystemMonitor:
    def __init__(self, interval=60):
        self.interval = interval
        self.running = False
        self.thread = None
        self.stats = {
            "cpu": {"usage": 0},
            "memory": {"total": 0, "used": 0, "percent": 0},
            "gpu": {"available": False, "name": "N/A", "memory_total": 0, "memory_used": 0, "percent": 0}
        }
    
    def collect_stats(self):
        """Collect system statistics"""
        # CPU stats
        self.stats["cpu"]["usage"] = psutil.cpu_percent()
        
        # Memory stats
        memory = psutil.virtual_memory()
        self.stats["memory"]["total"] = memory.total / (1024 ** 3)  # GB
        self.stats["memory"]["used"] = memory.used / (1024 ** 3)    # GB
        self.stats["memory"]["percent"] = memory.percent
        
        # GPU stats
        if torch.cuda.is_available():
            self.stats["gpu"]["available"] = True
            self.stats["gpu"]["name"] = torch.cuda.get_device_name(0)
            
            # Get GPU memory stats
            gpu_memory = torch.cuda.get_device_properties(0).total_memory
            gpu_memory_allocated = torch.cuda.memory_allocated(0)
            
            self.stats["gpu"]["memory_total"] = gpu_memory / (1024 ** 3)  # GB
            self.stats["gpu"]["memory_used"] = gpu_memory_allocated / (1024 ** 3)  # GB
            self.stats["gpu"]["percent"] = (gpu_memory_allocated / gpu_memory) * 100
        
        # Log stats
        logger.info(f"System stats: {json.dumps(self.stats)}")
        
        # Save stats to file
        self._save_stats()
    
    def _save_stats(self):
        """Save stats to a JSON file"""
        os.makedirs("logs", exist_ok=True)
        filename = f"logs/system_stats_{datetime.now().strftime('%Y%m%d')}.json"
        
        try:
            if os.path.exists(filename):
                with open(filename, 'r') as f:
                    data = json.load(f)
            else:
                data = []
            
            data.append({
                "timestamp": datetime.now().isoformat(),
                "stats": self.stats
            })
            
            with open(filename, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving stats: {str(e)}")
    
    def start(self):
        """Start monitoring thread"""
        if self.running:
            return
        
        self.running = True
        self.thread = threading.Thread(target=self._monitor_loop)
        self.thread.daemon = True
        self.thread.start()
        logger.info("System monitoring started")
    
    def stop(self):
        """Stop monitoring thread"""
        self.running = False
        if self.thread:
            self.thread.join()
        logger.info("System monitoring stopped")
    
    def _monitor_loop(self):
        """Main monitoring loop"""
        while self.running:
            self.collect_stats()
            time.sleep(self.interval)
    
    def get_stats(self):
        """Get current system stats"""
        return self.stats

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from typing import Any
from app.core.security import create_access_token, verify_password
from schemas.auth import Token, UserCreate, User
from datetime import timedelta
from app.core.config import settings

router = APIRouter()

# Simulated user database for demo purposes
# In production, this would be stored in a database
users_db = {
    "admin@example.com": {
        "email": "admin@example.com",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",  # "password"
        "is_active": True,
        "is_admin": True
    }
}

@router.post("/login", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()) -> Any:
    user = users_db.get(form_data.username)
    if not user or not verify_password(form_data.password, user["hashed_password"]):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        subject=user["email"], expires_delta=access_token_expires
    )
    
    return {"access_token": access_token, "token_type": "bearer"}

@router.post("/register", response_model=User)
async def register_user(user_in: UserCreate) -> Any:
    if user_in.email in users_db:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered",
        )
    
    # In a real application, you would hash the password and store in database
    # For demo, we'll just add to our in-memory dictionary
    users_db[user_in.email] = {
        "email": user_in.email,
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",  # Pretend we hashed the password
        "is_active": True,
        "is_admin": len(users_db) == 0  # First user is admin
    }
    
    return {
        "email": user_in.email,
        "is_active": True,
        "is_admin": users_db[user_in.email]["is_admin"]
    }

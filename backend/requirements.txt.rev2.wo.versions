# Optimized Requirements for RAG Application - Balanced Configuration
# Newer versions with memory corruption fixes applied
# Maintains modern features while resolving build issues

# =============================================================================
# CORE WEB FRAMEWORK DEPENDENCIES (Install First)
# =============================================================================
fastapi
uvicorn
python-multipart
python-jose[cryptography]
passlib[bcrypt]
python-dotenv

# =============================================================================
# DATABASE DEPENDENCIES (Install Second)
# =============================================================================
sqlalchemy
psycopg2-binary
alembic
qdrant-client

# =============================================================================
# CORE DATA PROCESSING (Install Third)
# =============================================================================
numpy
pandas
scipy

# =============================================================================
# MACHINE LEARNING STACK - BALANCED VERSIONS (Install Fourth)
# =============================================================================
# Core ML packages with memory fixes
transformers          # UPDATED: Includes memory fixes from 4.45+
tokenizers                    # UPDATED: Compatible with transformers 4.44.2
sentence-transformers         # UPDATED: Includes memory management fixes
huggingface-hub               # UPDATED: Improved caching with memory fixes

# GPU acceleration packages - balanced versions
accelerate         # UPDATED: Includes memory management improvements
bitsandbytes          # UPDATED: RTX 5090 optimized with memory fixes
optimum               # UPDATED: Latest stable with hardware optimizations

# Supporting ML packages
safetensors            # UPDATED: Latest stable model loading
datasets              # UPDATED: Improved memory management

# =============================================================================
# DOCUMENT PROCESSING (Install Fifth)
# =============================================================================
PyPDF2
python-docx
pytesseract
Pillow                # UPDATED: Security fixes, stable memory management
pymupdf               # UPDATED: Latest stable with memory improvements
email-validator

# =============================================================================
# TEXT PROCESSING - LANGCHAIN MODERN STABLE
# =============================================================================
langchain-core             # UPDATED: Modern stable core
langchain                  # UPDATED: Modern stable main package
langchain-community        # UPDATED: Modern stable community features
tiktoken                    # UPDATED: Improved tokenizer performance

# =============================================================================
# HTTP AND API CLIENTS
# =============================================================================
httpx
requests
aiofiles

# =============================================================================
# MONITORING AND LOGGING
# =============================================================================
prometheus-client
structlog
psutil
GPUtil

# =============================================================================
# DEVELOPMENT AND TESTING
# =============================================================================
pytest
pytest-asyncio
black
isort
flake8

# =============================================================================
# SYSTEM UTILITIES
# =============================================================================
pydantic
pydantic-settings
typing-extensions
click

# =============================================================================
# BACKGROUND PROCESSING (Install separately if needed)
# =============================================================================
celery
redis

# =============================================================================
# INSTALLATION NOTES:
# =============================================================================
# 1. Install in stages using separate pip install commands
# 2. Use --no-cache-dir flag for all installations
# 3. Set memory limit: docker build --memory=8g
# 4. Use pip install --no-deps for problematic packages if needed
# 5. PyTorch installed separately in Dockerfile with CUDA 12.8 support


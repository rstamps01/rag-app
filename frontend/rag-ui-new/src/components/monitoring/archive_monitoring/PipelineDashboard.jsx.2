// src/components/monitoring/PipelineDashboard.jsx
import React, { useState, useEffect } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import api from '../../lib/api';

const PipelineDashboard = () => {
  const [pipelines, setPipelines] = useState([]);
  const [selectedPipeline, setSelectedPipeline] = useState(null);
  const [pipelineEvents, setPipelineEvents] = useState([]);
  const [stats, setStats] = useState({});
  const [refreshInterval, setRefreshInterval] = useState(5000);
  const [isAutoRefresh, setIsAutoRefresh] = useState(true);
  const [activeTab, setActiveTab] = useState('flow');

  // Fetch pipelines
  useEffect(() => {
    const fetchPipelines = async () => {
      try {
        const response = await api.get('/api/monitoring/pipelines');
        setPipelines(response.data.pipelines);
        
        // Auto-select the most recent pipeline
        if (response.data.pipelines.length > 0 && !selectedPipeline) {
          setSelectedPipeline(response.data.pipelines[0]);
        }
      } catch (error) {
        console.error('Error fetching pipelines:', error);
      }
    };
    
    fetchPipelines();
    
    // Set up auto-refresh
    if (isAutoRefresh) {
      const interval = setInterval(fetchPipelines, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [isAutoRefresh, refreshInterval, selectedPipeline]);
  
  // Fetch pipeline events when a pipeline is selected
  useEffect(() => {
    const fetchPipelineEvents = async () => {
      if (!selectedPipeline) return;
      
      try {
        const response = await api.get(`/api/monitoring/pipelines/${selectedPipeline}`);
        setPipelineEvents(response.data.events);
      } catch (error) {
        console.error('Error fetching pipeline events:', error);
      }
    };
    
    fetchPipelineEvents();
    
    // Set up auto-refresh
    if (isAutoRefresh && selectedPipeline) {
      const interval = setInterval(fetchPipelineEvents, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [selectedPipeline, isAutoRefresh, refreshInterval]);
  
  // Fetch stats
  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await api.get('/api/monitoring/stats');
        setStats(response.data.stats);
      } catch (error) {
        console.error('Error fetching stats:', error);
      }
    };
    
    fetchStats();
    
    // Set up auto-refresh
    if (isAutoRefresh) {
      const interval = setInterval(fetchStats, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [isAutoRefresh, refreshInterval]);
  
  // Process pipeline events for visualization
  const processedEvents = React.useMemo(() => {
    if (!pipelineEvents.length) return [];
    
    // Sort events by timestamp
    const sortedEvents = [...pipelineEvents].sort((a, b) => 
      new Date(a.timestamp) - new Date(b.timestamp)
    );
    
    // Calculate durations between stages
    let lastTimestamp = null;
    return sortedEvents.map(event => {
      const timestamp = new Date(event.timestamp);
      let duration = 0;
      
      if (lastTimestamp) {
        duration = timestamp - lastTimestamp;
      }
      
      lastTimestamp = timestamp;
      
      return {
        ...event,
        formattedTimestamp: timestamp.toLocaleTimeString(),
        duration
      };
    });
  }, [pipelineEvents]);
  
  // Render pipeline flow diagram
  const renderPipelineFlow = () => {
    if (!processedEvents.length) {
      return <div className="text-center p-4">No pipeline data available</div>;
    }
    
    // Create a visual representation of the pipeline flow
    return (
      <div className="flex flex-col space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          {['Document Upload', 'Text Extraction', 'Embedding Generation', 'Vector Storage', 'Query Processing'].map((stage, index) => (
            <div key={index} className={`p-4 border rounded ${getStageHighlight(stage)}`}>
              <h3 className="text-sm font-bold">{stage}</h3>
              <div className="p-2">
                {getStageMetrics(stage)}
              </div>
            </div>
          ))}
        </div>
        
        <div style={{ width: '100%', height: 300 }}>
          <ResponsiveContainer>
            <BarChart data={processedEvents}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="stage" />
              <YAxis label={{ value: 'Duration (ms)', angle: -90, position: 'insideLeft' }} />
              <Tooltip />
              <Legend />
              <Bar dataKey="data.processing_time_ms" name="Processing Time (ms)" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    );
  };
  
  // Helper function to highlight active stages
  const getStageHighlight = (stage) => {
    // Map stage names to event stages
    const stageMap = {
      'Document Upload': ['document_received', 'file_saved'],
      'Text Extraction': ['text_extracted', 'text_chunked'],
      'Embedding Generation': ['embeddings_generated'],
      'Vector Storage': ['vectors_stored'],
      'Query Processing': ['query_received', 'query_embedded', 'documents_retrieved', 'response_generated']
    };
    
    // Check if any events match this stage
    const isActive = processedEvents.some(event => 
      stageMap[stage] && stageMap[stage].includes(event.stage)
    );
    
    return isActive ? "bg-blue-100" : "bg-gray-100";
  };
  
  // Helper function to get metrics for each stage
  const getStageMetrics = (stage) => {
    // Map stage names to metrics
    const stageMetrics = {
      'Document Upload': () => {
        const event = processedEvents.find(e => e.stage === 'document_received');
        if (!event) return 'No data';
        return `File: ${event.data.filename || 'Unknown'}`;
      },
      'Text Extraction': () => {
        const event = processedEvents.find(e => e.stage === 'text_extracted');
        if (!event) return 'No data';
        return `Length: ${event.data.text_length || 0} chars`;
      },
      'Embedding Generation': () => {
        const event = processedEvents.find(e => e.stage === 'embeddings_generated');
        if (!event) return 'No data';
        return `Chunks: ${event.data.chunk_count || 0}`;
      },
      'Vector Storage': () => {
        const event = processedEvents.find(e => e.stage === 'vectors_stored');
        if (!event) return 'No data';
        return `Vectors: ${event.data.vector_count || 0}`;
      },
      'Query Processing': () => {
        const event = processedEvents.find(e => e.stage === 'response_generated');
        if (!event) return 'No data';
        return `Time: ${event.data.generation_time_ms || 0}ms`;
      }
    };
    
    return <div className="text-xs">{stageMetrics[stage]()}</div>;
  };

  const renderRawEvents = () => {
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border">
          <thead>
            <tr>
              <th className="border p-2">Timestamp</th>
              <th className="border p-2">Stage</th>
              <th className="border p-2">Duration (ms)</th>
              <th className="border p-2">Details</th>
            </tr>
          </thead>
          <tbody>
            {processedEvents.map((event, index) => (
              <tr key={index}>
                <td className="border p-2">{event.formattedTimestamp}</td>
                <td className="border p-2">{event.stage}</td>
                <td className="border p-2">{event.duration}</td>
                <td className="border p-2">
                  <pre className="text-xs overflow-x-auto">
                    {JSON.stringify(event.data, null, 2)}
                  </pre>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  const renderStats = () => {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="border rounded p-4">
          <h3 className="text-lg font-bold mb-2">Document Processing</h3>
          <div style={{ width: '100%', height: 300 }}>
            <ResponsiveContainer>
              <LineChart data={[
                { name: 'Last 24h', documents: stats.documents_24h || 0 },
                { name: 'Last 7d', documents: stats.documents_7d || 0 },
                { name: 'Total', documents: stats.total_documents || 0 }
              ]}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="documents" stroke="#8884d8" />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
        
        <div className="border rounded p-4">
          <h3 className="text-lg font-bold mb-2">Query Processing</h3>
          <div style={{ width: '100%', height: 300 }}>
            <ResponsiveContainer>
              <LineChart data={[
                { name: 'Last 24h', queries: stats.queries_24h || 0 },
                { name: 'Last 7d', queries: stats.queries_7d || 0 },
                { name: 'Total', queries: stats.total_queries || 0 }
              ]}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="queries" stroke="#82ca9d" />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    );
  };
  
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">RAG Pipeline Monitoring</h1>
      
      <div className="flex justify-between mb-4">
        <div className="flex space-x-2">
          <select 
            className="border rounded p-2"
            value={selectedPipeline || ''}
            onChange={(e) => setSelectedPipeline(e.target.value)}
          >
            <option value="">Select Pipeline</option>
            {pipelines.map(pipeline => (
              <option key={pipeline} value={pipeline}>{pipeline}</option>
            ))}
          </select>
          
          <button 
            className="bg-blue-500 text-white px-4 py-2 rounded"
            onClick={() => {
              setPipelines([]);
              setSelectedPipeline(null);
              setPipelineEvents([]);
            }}
          >
            Refresh
          </button>
        </div>
        
        <div className="flex items-center space-x-2">
          <label className="flex items-center">
            <input 
              type="checkbox" 
              checked={isAutoRefresh} 
              onChange={() => setIsAutoRefresh(!isAutoRefresh)}
              className="mr-2"
            />
            Auto-refresh
          </label>
          
          <select 
            className="border rounded p-2"
            value={refreshInterval}
            onChange={(e) => setRefreshInterval(Number(e.target.value))}
            disabled={!isAutoRefresh}
          >
            <option value={1000}>1 second</option>
            <option value={5000}>5 seconds</option>
            <option value={10000}>10 seconds</option>
            <option value={30000}>30 seconds</option>
          </select>
        </div>
      </div>
      
      <div className="mb-4">
        <ul className="flex border-b">
          <li className="-mb-px mr-1">
            <button 
              className={`inline-block py-2 px-4 font-semibold border-l border-t border-r rounded-t ${activeTab === 'flow' ? 'bg-white' : 'bg-gray-200 text-gray-700'}`}
              onClick={() => setActiveTab('flow')}
            >
              Pipeline Flow
            </button>
          </li>
          <li className="mr-1">
            <button 
              className={`inline-block py-2 px-4 font-semibold rounded-t ${activeTab === 'events' ? 'bg-white border-l border-t border-r' : 'bg-gray-200 text-gray-700'}`}
              onClick={() => setActiveTab('events')}
            >
              Raw Events
            </button>
          </li>
          <li className="mr-1">
            <button 
              className={`inline-block py-2 px-4 font-semibold rounded-t ${activeTab === 'stats' ? 'bg-white border-l border-t border-r' : 'bg-gray-200 text-gray-700'}`}
              onClick={() => setActiveTab('stats')}
            >
              Statistics
            </button>
          </li>
        </ul>
      </div>
      
      <div className="p-4 border rounded">
        {activeTab === 'flow' && renderPipelineFlow()}
        {activeTab === 'events' && renderRawEvents()}
        {activeTab === 'stats' && renderStats()}
      </div>
    </div>
  );
};

export default PipelineDashboard;

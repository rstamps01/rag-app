// In src/components/monitoring/PipelineDashboard.jsx
// import {loadEsm} from 'load-esm';
import React, { useState, useEffect } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';  //
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';  //
import { Button } from '../ui/button';  //
import api, { endpoints } from '../lib/api';  //


function PipelineDashboard() {
  const [pipelines, setPipelines] = useState([]);
  const [selectedPipeline, setSelectedPipeline] = useState(null);
  const [pipelineEvents, setPipelineEvents] = useState([]);
  const [stats, setStats] = useState({});
  const [refreshInterval, setRefreshInterval] = useState(5000);
  const [isAutoRefresh, setIsAutoRefresh] = useState(true);

  // Fetch pipelines
  useEffect(() => {
    const fetchPipelines = async () => {
      try {
        const response = await api.get('/api/monitoring/pipelines');
        setPipelines(response.data.pipelines);

        // Auto-select the most recent pipeline
        if (response.data.pipelines.length > 0 && !selectedPipeline) {
          setSelectedPipeline(response.data.pipelines[0]);
        }
      } catch (error) {
        console.error('Error fetching pipelines:', error);
      }
    };

    fetchPipelines();
    (async () => {
      const esmModule = await loadEsm('esm-module');
    })();

    // Set up auto-refresh
    if (isAutoRefresh) {
      const interval = setInterval(fetchPipelines, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [isAutoRefresh, refreshInterval, selectedPipeline]);

  // Fetch pipeline events when a pipeline is selected
  useEffect(() => {
    const fetchPipelineEvents = async () => {
      if (!selectedPipeline) return;

      try {
        const response = await api.get(`/api/monitoring/pipelines/${selectedPipeline}`);
        setPipelineEvents(response.data.events);
      } catch (error) {
        console.error('Error fetching pipeline events:', error);
      }
    };

    fetchPipelineEvents();

    // Set up auto-refresh
    if (isAutoRefresh && selectedPipeline) {
      const interval = setInterval(fetchPipelineEvents, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [selectedPipeline, isAutoRefresh, refreshInterval]);

  // Fetch stats
  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await api.get('/api/monitoring/stats');
        setStats(response.data.stats);
      } catch (error) {
        console.error('Error fetching stats:', error);
      }
    };

    fetchStats();

    // Set up auto-refresh
    if (isAutoRefresh) {
      const interval = setInterval(fetchStats, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [isAutoRefresh, refreshInterval]);

  // Process pipeline events for visualization
  const processedEvents = React.useMemo(() => {
    if (!pipelineEvents.length) return [];

    // Sort events by timestamp
    const sortedEvents = [...pipelineEvents].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)
    );

    // Calculate durations between stages
    let lastTimestamp = null;
    return sortedEvents.map(event => {
      const timestamp = new Date(event.timestamp);
      let duration = 0;

      if (lastTimestamp) {
        duration = timestamp - lastTimestamp;
      }

      lastTimestamp = timestamp;

      return {
        ...event,
        formattedTimestamp: timestamp.toLocaleTimeString(),
        duration
      };
    });
  }, [pipelineEvents]);

  // Render pipeline flow diagram
  const renderPipelineFlow = () => {
    if (!processedEvents.length) {
      return <div className="text-center p-4">No pipeline data available</div>;
    }

    // Create a visual representation of the pipeline flow
    return (
      <div className="flex flex-col space-y-4">
        <div className="grid grid-cols-5 gap-4">
          {['Document Upload', 'Text Extraction', 'Embedding Generation', 'Vector Storage', 'Query Processing'].map((stage, index) => (
            <Card key={index} className={`p-4 ${getStageHighlight(stage)}`}>
              <CardTitle className="text-sm">{stage}</CardTitle>
              <CardContent className="p-2">
                {getStageMetrics(stage)}
              </CardContent>
            </Card>
          ))}
        </div>

        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={processedEvents}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="stage" />
            <YAxis label={{ value: 'Duration (ms)', angle: -90, position: 'insideLeft' }} />
            <Tooltip />
            <Legend />
            <Bar dataKey="data.processing_time_ms" name="Processing Time (ms)" fill="#8884d8" />
          </BarChart>
        </ResponsiveContainer>
      </div>
    );
  };

  // Helper function to highlight active stages
  const getStageHighlight = (stage) => {
    // Implement logic to highlight the current active stage
    return "bg-gray-100";
  };

  // Helper function to get metrics for each stage
  const getStageMetrics = (stage) => {
    // Implement logic to display relevant metrics for each stage
    return <div className="text-xs">Processing...</div>;
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">RAG Pipeline Monitoring</h1>

      <div className="flex justify-between mb-4">
        <div className="flex space-x-2">
          <select
            className="border rounded p-2"
            value={selectedPipeline || ''}
            onChange={(e) => setSelectedPipeline(e.target.value)}
          >
            <option value="">Select Pipeline</option>
            {pipelines.map(pipeline => (
              <option key={pipeline} value={pipeline}>{pipeline}</option>
            ))}
          </select>

          <Button onClick={() => {
            setPipelines([]);
            setSelectedPipeline(null);
            setPipelineEvents([]);
          } }>
            Refresh
          </Button>
        </div>

        <div className="flex items-center space-x-2">
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={isAutoRefresh}
              onChange={() => setIsAutoRefresh(!isAutoRefresh)}
              className="mr-2" />
            Auto-refresh
          </label>

          <select
            className="border rounded p-2"
            value={refreshInterval}
            onChange={(e) => setRefreshInterval(Number(e.target.value))}
            disabled={!isAutoRefresh}
          >
            <option value={1000}>1 second</option>
            <option value={5000}>5 seconds</option>
            <option value={10000}>10 seconds</option>
            <option value={30000}>30 seconds</option>
          </select>
        </div>
      </div>

      <Tabs defaultValue="flow">
        <TabsList>
          <TabsTrigger value="flow">Pipeline Flow</TabsTrigger>
          <TabsTrigger value="events">Raw Events</TabsTrigger>
          <TabsTrigger value="stats">Statistics</TabsTrigger>
        </TabsList>

        <TabsContent value="flow" className="p-4">
          {renderPipelineFlow()}
        </TabsContent>

        <TabsContent value="events" className="p-4">
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white border">
              <thead>
                <tr>
                  <th className="border p-2">Timestamp</th>
                  <th className="border p-2">Stage</th>
                  <th className="border p-2">Duration (ms)</th>
                  <th className="border p-2">Details</th>
                </tr>
              </thead>
              <tbody>
                {processedEvents.map((event, index) => (
                  <tr key={index}>
                    <td className="border p-2">{event.formattedTimestamp}</td>
                    <td className="border p-2">{event.stage}</td>
                    <td className="border p-2">{event.duration}</td>
                    <td className="border p-2">
                      <pre className="text-xs overflow-x-auto">
                        {JSON.stringify(event.data, null, 2)}
                      </pre>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </TabsContent>

        <TabsContent value="stats" className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle>Document Processing</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={[
                    { name: 'Last 24h', documents: stats.documents_24h || 0 },
                    { name: 'Last 7d', documents: stats.documents_7d || 0 },
                    { name: 'Total', documents: stats.total_documents || 0 }
                  ]}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="documents" stroke="#8884d8" />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Query Processing</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={[
                    { name: 'Last 24h', queries: stats.queries_24h || 0 },
                    { name: 'Last 7d', queries: stats.queries_7d || 0 },
                    { name: 'Total', queries: stats.total_queries || 0 }
                  ]}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="queries" stroke="#82ca9d" />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

export default PipelineDashboard;

# ============================
# RAG Application Environment Configuration
# Optimized for vastdata deployment with RTX 5090 GPU
# ============================

# ============================
# AUTHENTICATION & SECURITY
# ============================

# JWT Secret for authentication (REQUIRED)
# Generate with: openssl rand -hex 32
JWT_SECRET=d7cab90ed8cbc61dcc3170aa5c3ccb5a9d689474af3d8163e9bc93fa722fbd4f

# HuggingFace Token for model access (REQUIRED)
# Get from: https://huggingface.co/settings/tokens
HUGGING_FACE_HUB_TOKEN=your_huggingface_token_here

# ============================
# DATABASE CONFIGURATION
# ============================

# PostgreSQL Database URL
DATABASE_URL=postgresql://rag:rag@postgres-07:5432/rag

# Database credentials (used by docker-compose)
POSTGRES_USER=rag
POSTGRES_PASSWORD=rag
POSTGRES_DB=rag

# ============================
# VECTOR DATABASE CONFIGURATION
# ============================

# Qdrant Vector Database URL
QDRANT_URL=http://qdrant-07:6333

# ============================
# MODEL CACHE CONFIGURATION
# ============================

# Primary model cache directory (backend cache)
MODELS_CACHE_DIR=/app/models_cache
HF_HOME=/app/models_cache/home
HF_HUB_CACHE=/app/models_cache
HOST_HF_CACHE=/app/models_cache
HOST_MODELS_CACHE=/app/models_cache

# HuggingFace cache configuration
# HF_HOME=/root/.cache/huggingface
# HF_HOME=/root/.cache/huggingface/transformers
# HF_DATASETS_CACHE=/root/.cache/huggingface/datasets
# HF_HUB_CACHE=/root/.cache/huggingface/hub

# Model-specific paths for direct loading
LLM_MODEL_PATH=/app/models_cache/models--mistralai--Mistral-7B-Instruct-v0.2
EMBEDDING_MODEL_PATH=/app/models_cache/models--sentence-transformers--all-MiniLM-L6-v2

# Cache behavior settings
HF_HUB_OFFLINE=false
TRANSFORMERS_OFFLINE=false
USE_CACHE_FIRST=true

# ============================
# RTX 5090 GPU CONFIGURATION
# ============================

# CUDA device configuration
CUDA_VISIBLE_DEVICES=1

# RTX 5090 architecture (Ada Lovelace)
TORCH_CUDA_ARCH_LIST=12.0

# CUDA memory management for RTX 5090
PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512

# GPU optimization flags
CUDA_LAUNCH_BLOCKING=0
TORCH_CUDNN_V8_API_ENABLED=1

# ============================
# MODEL CONFIGURATION
# ============================

# Primary LLM model
LLM_MODEL_NAME=mistralai/Mistral-7B-Instruct-v0.2

# Embedding model
EMBEDDING_MODEL_NAME=sentence-transformers/all-MiniLM-L6-v2

# Model loading preferences
MODEL_LOAD_IN_8BIT=true
MODEL_LOAD_IN_4BIT=false
USE_FLASH_ATTENTION=true

# ============================
# APPLICATION CONFIGURATION
# ============================

# Application environment
ENVIRONMENT=production

# API configuration
API_HOST=0.0.0.0
API_PORT=8000

# Frontend configuration
FRONTEND_URL=http://localhost:3000

# Logging level
LOG_LEVEL=INFO

# ============================
# PERFORMANCE TUNING
# ============================

# Worker processes (adjust based on CPU cores)
WORKERS=1

# Maximum request size (for document uploads)
MAX_CONTENT_LENGTH=50MB

# Request timeout
REQUEST_TIMEOUT=300

# ============================
# MONITORING & HEALTH CHECKS
# ============================

# Enable health check endpoints
ENABLE_HEALTH_CHECKS=true

# Enable performance monitoring
ENABLE_MONITORING=true

# Cache validation on startup
VALIDATE_CACHE_ON_STARTUP=true

# ============================
# DEVELOPMENT SETTINGS
# ============================

# Debug mode (set to false in production)
DEBUG=false

# Auto-reload on code changes (development only)
RELOAD=false

# Enable detailed error messages
DETAILED_ERRORS=false

# ============================
# DOCKER COMPOSE OVERRIDES
# ============================

# Compose project name
COMPOSE_PROJECT_NAME=rag-app-07

# Container restart policy
RESTART_POLICY=unless-stopped

# ============================
# BACKUP AND MAINTENANCE
# ============================

# Backup directory
BACKUP_DIR=/app/backups

# Automatic backup schedule (cron format)
BACKUP_SCHEDULE=0 2 * * *

# Retention period for backups (days)
BACKUP_RETENTION_DAYS=30

# ============================
# USAGE NOTES
# ============================

# 1. Copy this file to .env and update the values
# 2. Never commit .env to version control
# 3. Ensure HUGGINGFACE_TOKEN has access to required models
# 4. JWT_SECRET should be unique and secure
# 5. Adjust GPU settings based on your RTX 5090 configuration
# 6. Cache paths should match your vastdata deployment structure

# ============================
# QUICK SETUP COMMANDS
# ============================

# Copy template:
# cp .env.template .env

# Generate JWT secret:
# openssl rand -hex 32

# Set file permissions:
# chmod 600 .env

# Validate configuration:
# docker-compose config

# Initialize cache:
# docker-compose --profile cache-init up model-cache-init

# Start application:
# docker-compose up -d

